## MR-RIVER code
## Lijuan Lin
## R version 3.4.1

# ************************************************** #
#                     modified beta                  #
# ************************************************** #
# n_ref:  sample size for LD 
# vary:   variance of outcome  
# varz:   variance of each SNP
# maf:    maf of each SNP
# ldrho:  correlation between SNP
# beta:   coefficient of regression
beta_mod <- function(beta, n_ref, ldrho, varz=NULL, maf=NULL, vary){
  coef_zz<-ldrho
  
  var_zz <- ldrho
  if (length(varz)>0)
    varz<-varz
  if (length(maf)>0)
    varz <- 2*maf*(1-maf)
  
  for (m in 1:nrow(ldrho)) {
    for (n in 1:m) {
      # linear coefficient between independent variable   r*sd(Y)/sd(X)
      coef_zz[m,n] <- sqrt(varz[n]/varz[m])*ldrho[m,n]
      coef_zz[n,m] <- sqrt(varz[m]/varz[n])*ldrho[n,m]
      # covariance of independent  cov(x1,x2)=r*sd(x1)*sd(x2)
      var_zz[m,n] <- sqrt(varz[m]*varz[n])*ldrho[m,n]
      var_zz[n,m] <- sqrt(varz[n]*varz[m])*ldrho[n,m]
    }
  }
  diag(var_zz)<-varz
  # Generalized Inverse of a Matrix
  bzy <- ginv(coef_zz)%*%beta   # adjust SNP effects on the disease
  
  Sigma <- abs(as.vector(vary-t(bzy)%*%var_zz)%*%bzy)
  zz <- ginv(var_zz)  
  df <- n_ref-nrow(ldrho)-1   
  bzy_se <- sqrt(Sigma[1,1]*diag(zz)/df)  
  bzy_pval <- 2*pt(abs(bzy/bzy_se),df,lower.tail = F)
  return(data.frame(bzy,bzy_se,bzy_pval))
}

# ************************************************** #
#                     LD pruning                     #
# ************************************************** #
# LD pruning, removing pairs of SNPs that LD r2 > threshold
# return index: the index be used for further analysis
snp_ld_prune = function(ldrho, ld_r2_thresh) {
  # initialization
  nsnp = dim(ldrho)[1]
  diag(ldrho) = 0
  ldrho[upper.tri(ldrho)]=0
  include_id = c(1:nsnp)
  
  # save the index which have ld r^2 > threshold
  indx = which(ldrho^2>ld_r2_thresh, arr.ind=T)
  if(length(indx)==0) return(NULL);
  indx1 = as.numeric(indx[,2])
  indx2 = as.numeric(indx[,1])
  slct_indx = c(indx1, indx2)
  indxbuf = unique(sort(slct_indx))
  
  # count how many SNPs in high LD
  nproc = length(indxbuf)
  n_slct_snp = as.numeric()
  for( i in 1 : nproc) {
    n_slct_snp[i] = length(which(slct_indx==indxbuf[i]))
  }  
  
  # decide the index to remove
  nproc = length(indx1)
  if(nproc==0) return(NULL);
  for( i in 1 : nproc ) {
    n1 = n_slct_snp[which(indxbuf==indx1[i])]
    n2 = n_slct_snp[which(indxbuf==indx2[i])]
    if(n1 < n2) {
      t = indx1[i]; indx1[i] = indx2[i]; indx2[i] = t
    }
  }
  indx1 = unique(sort(indx1))
  return(indx1)
}



# ************************************************** #
#                     MR-RIVER                       #
# ************************************************** #
# bzx:       vector, SNP effects on risk factor
# bzx_se:	   vector, standard errors of bzx
# bzx_pval:  vector, p values for bzx
# bzy:       vector, SNP effects on disease
# bzy_se:    vector, standard errors of bzy
# SNP:       instrumental variables
# bzx_maf:   vector, minor allele frequency of SNP	
# varz_x:    vector, variance of SNP
# MAF:       flag for maf
# var:       flag for variance
# ldrho:     LD correlation matrix of the SNPs
# varx:      variance of risk factor
# bzx_n:     sample size of GWAS for risk factor
# gwas_thresh:  threshold p-value to select IVs from GWAS for risk factor
# ld_r2_thresh: LD r2 threshold to remove SNPs in high LD

MR_RIVER<-function(mrdata, MAF=TRUE, var=FALSE,
                   ldrho, varx, eps = 1e-6, 
                   gwas_thresh=1,ld_r2_thresh=1){
  
  # GWAS prune based on bzx_pval
  mrdata <- mrdata[mrdata$bzx_pval<=gwas_thresh,]
  rho <- ldrho[mrdata$SNP,mrdata$SNP]
  
  # LD prune according to r2
  index <- snp_ld_prune(rho, ld_r2_thresh)
  if(length(index)>0){
    rho <- rho[-index,-index]
    mrdata <- mrdata[-index,]
  } 
  
  nsnps<-nrow(mrdata)
  
  if(MAF==TRUE){
    tmp <- beta_mod(beta=mrdata$bzx, n_ref=mrdata$bzx_n, ldrho=rho,
                    varz=NULL, maf=mrdata$bzx_maf, vary=mrdata$varx)
    
  }
  if(var==TRUE){
    tmp <- beta_mod(beta=mrdata$bzx, n_ref=mrdata$bzx_n, ldrho=rho,
                    varz=mrdata$varz_x, vary=mrdata$varx, maf=NULL)
  }
  
  bzy <- mrdata$bzy    # SNP effects on the disease
  bzy_se <- mrdata$bzy_se   # standard errors of bzy
  
  bzx <- mrdata$bzx    # SNP effects on the exposure
  bzx_se <- mrdata$bzx_se   # standard errors of bzx
  
  # modified coefficients of bzx
  m_bzx <- tmp$bzy
  bxy <- sum(m_bzx*bzy/bzy_se^2)/sum(m_bzx*bzx/bzy_se^2)
  bxy_se <- sqrt(sum((m_bzx/bzy_se)%o%(m_bzx/bzy_se)*rho)/sum(m_bzx*bzx/bzy_se^2)^2)
  pvalue <- 2*pnorm(-abs(bxy/bxy_se))
  
  mr_results<- c(bxy=bxy, bxy_se=bxy_se, bxy_pval=pvalue)
  return(mr_results)
}

